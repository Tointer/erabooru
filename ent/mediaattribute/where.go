// Code generated by ent, DO NOT EDIT.

package mediaattribute

import (
	"era/booru/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// MediaID applies equality check predicate on the "media_id" field. It's identical to MediaIDEQ.
func MediaID(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldMediaID, v))
}

// AttributeID applies equality check predicate on the "attribute_id" field. It's identical to AttributeIDEQ.
func AttributeID(v int) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldAttributeID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldValue, v))
}

// MediaIDEQ applies the EQ predicate on the "media_id" field.
func MediaIDEQ(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldMediaID, v))
}

// MediaIDNEQ applies the NEQ predicate on the "media_id" field.
func MediaIDNEQ(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNEQ(FieldMediaID, v))
}

// MediaIDIn applies the In predicate on the "media_id" field.
func MediaIDIn(vs ...string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldIn(FieldMediaID, vs...))
}

// MediaIDNotIn applies the NotIn predicate on the "media_id" field.
func MediaIDNotIn(vs ...string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNotIn(FieldMediaID, vs...))
}

// MediaIDGT applies the GT predicate on the "media_id" field.
func MediaIDGT(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldGT(FieldMediaID, v))
}

// MediaIDGTE applies the GTE predicate on the "media_id" field.
func MediaIDGTE(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldGTE(FieldMediaID, v))
}

// MediaIDLT applies the LT predicate on the "media_id" field.
func MediaIDLT(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldLT(FieldMediaID, v))
}

// MediaIDLTE applies the LTE predicate on the "media_id" field.
func MediaIDLTE(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldLTE(FieldMediaID, v))
}

// MediaIDContains applies the Contains predicate on the "media_id" field.
func MediaIDContains(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldContains(FieldMediaID, v))
}

// MediaIDHasPrefix applies the HasPrefix predicate on the "media_id" field.
func MediaIDHasPrefix(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldHasPrefix(FieldMediaID, v))
}

// MediaIDHasSuffix applies the HasSuffix predicate on the "media_id" field.
func MediaIDHasSuffix(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldHasSuffix(FieldMediaID, v))
}

// MediaIDEqualFold applies the EqualFold predicate on the "media_id" field.
func MediaIDEqualFold(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEqualFold(FieldMediaID, v))
}

// MediaIDContainsFold applies the ContainsFold predicate on the "media_id" field.
func MediaIDContainsFold(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldContainsFold(FieldMediaID, v))
}

// AttributeIDEQ applies the EQ predicate on the "attribute_id" field.
func AttributeIDEQ(v int) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldAttributeID, v))
}

// AttributeIDNEQ applies the NEQ predicate on the "attribute_id" field.
func AttributeIDNEQ(v int) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNEQ(FieldAttributeID, v))
}

// AttributeIDIn applies the In predicate on the "attribute_id" field.
func AttributeIDIn(vs ...int) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldIn(FieldAttributeID, vs...))
}

// AttributeIDNotIn applies the NotIn predicate on the "attribute_id" field.
func AttributeIDNotIn(vs ...int) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNotIn(FieldAttributeID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldHasSuffix(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldNotNull(FieldValue))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.FieldContainsFold(FieldValue, v))
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.MediaAttribute {
	return predicate.MediaAttribute(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, MediaColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.MediaAttribute {
	return predicate.MediaAttribute(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttribute applies the HasEdge predicate on the "attribute" edge.
func HasAttribute() predicate.MediaAttribute {
	return predicate.MediaAttribute(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, AttributeColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributeWith applies the HasEdge predicate on the "attribute" edge with a given conditions (other predicates).
func HasAttributeWith(preds ...predicate.Attribute) predicate.MediaAttribute {
	return predicate.MediaAttribute(func(s *sql.Selector) {
		step := newAttributeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MediaAttribute) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MediaAttribute) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MediaAttribute) predicate.MediaAttribute {
	return predicate.MediaAttribute(sql.NotPredicates(p))
}
