// Code generated by ent, DO NOT EDIT.

package mediaattribute

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mediaattribute type in the database.
	Label = "media_attribute"
	// FieldMediaID holds the string denoting the media_id field in the database.
	FieldMediaID = "media_id"
	// FieldAttributeID holds the string denoting the attribute_id field in the database.
	FieldAttributeID = "attribute_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeAttribute holds the string denoting the attribute edge name in mutations.
	EdgeAttribute = "attribute"
	// MediaFieldID holds the string denoting the ID field of the Media.
	MediaFieldID = "id"
	// AttributeFieldID holds the string denoting the ID field of the Attribute.
	AttributeFieldID = "id"
	// Table holds the table name of the mediaattribute in the database.
	Table = "media_attributes"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "media_attributes"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "media_id"
	// AttributeTable is the table that holds the attribute relation/edge.
	AttributeTable = "media_attributes"
	// AttributeInverseTable is the table name for the Attribute entity.
	// It exists in this package in order to avoid circular dependency with the "attribute" package.
	AttributeInverseTable = "attributes"
	// AttributeColumn is the table column denoting the attribute relation/edge.
	AttributeColumn = "attribute_id"
)

// Columns holds all SQL columns for mediaattribute fields.
var Columns = []string{
	FieldMediaID,
	FieldAttributeID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MediaAttribute queries.
type OrderOption func(*sql.Selector)

// ByMediaID orders the results by the media_id field.
func ByMediaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaID, opts...).ToFunc()
}

// ByAttributeID orders the results by the attribute_id field.
func ByAttributeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributeID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByMediaField orders the results by media field.
func ByMediaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttributeField orders the results by attribute field.
func ByAttributeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributeStep(), sql.OrderByField(field, opts...))
	}
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, MediaColumn),
		sqlgraph.To(MediaInverseTable, MediaFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MediaTable, MediaColumn),
	)
}
func newAttributeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, AttributeColumn),
		sqlgraph.To(AttributeInverseTable, AttributeFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AttributeTable, AttributeColumn),
	)
}
