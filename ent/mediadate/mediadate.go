// Code generated by ent, DO NOT EDIT.

package mediadate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mediadate type in the database.
	Label = "media_date"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMediaID holds the string denoting the media_id field in the database.
	FieldMediaID = "media_id"
	// FieldDateID holds the string denoting the date_id field in the database.
	FieldDateID = "date_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeDate holds the string denoting the date edge name in mutations.
	EdgeDate = "date"
	// Table holds the table name of the mediadate in the database.
	Table = "media_dates"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "media_dates"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "media_id"
	// DateTable is the table that holds the date relation/edge.
	DateTable = "media_dates"
	// DateInverseTable is the table name for the Date entity.
	// It exists in this package in order to avoid circular dependency with the "date" package.
	DateInverseTable = "dates"
	// DateColumn is the table column denoting the date relation/edge.
	DateColumn = "date_id"
)

// Columns holds all SQL columns for mediadate fields.
var Columns = []string{
	FieldID,
	FieldMediaID,
	FieldDateID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MediaDate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMediaID orders the results by the media_id field.
func ByMediaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaID, opts...).ToFunc()
}

// ByDateID orders the results by the date_id field.
func ByDateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByMediaField orders the results by media field.
func ByMediaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), sql.OrderByField(field, opts...))
	}
}

// ByDateField orders the results by date field.
func ByDateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDateStep(), sql.OrderByField(field, opts...))
	}
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MediaTable, MediaColumn),
	)
}
func newDateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DateTable, DateColumn),
	)
}
