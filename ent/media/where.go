// Code generated by ent, DO NOT EDIT.

package media

import (
	"era/booru/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Media {
	return predicate.Media(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Media {
	return predicate.Media(sql.FieldContainsFold(FieldID, id))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldFormat, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldHeight, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldDuration, v))
}

// UploadDate applies equality check predicate on the "upload_date" field. It's identical to UploadDateEQ.
func UploadDate(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldUploadDate, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.Media {
	return predicate.Media(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.Media {
	return predicate.Media(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.Media {
	return predicate.Media(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.Media {
	return predicate.Media(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.Media {
	return predicate.Media(sql.FieldContainsFold(FieldFormat, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int16) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int16) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldWidth, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int16) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int16) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldHeight, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int16) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int16) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int16) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int16) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int16) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Media {
	return predicate.Media(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Media {
	return predicate.Media(sql.FieldNotNull(FieldDuration))
}

// UploadDateEQ applies the EQ predicate on the "upload_date" field.
func UploadDateEQ(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldUploadDate, v))
}

// UploadDateNEQ applies the NEQ predicate on the "upload_date" field.
func UploadDateNEQ(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldUploadDate, v))
}

// UploadDateIn applies the In predicate on the "upload_date" field.
func UploadDateIn(vs ...time.Time) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldUploadDate, vs...))
}

// UploadDateNotIn applies the NotIn predicate on the "upload_date" field.
func UploadDateNotIn(vs ...time.Time) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldUploadDate, vs...))
}

// UploadDateGT applies the GT predicate on the "upload_date" field.
func UploadDateGT(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldUploadDate, v))
}

// UploadDateGTE applies the GTE predicate on the "upload_date" field.
func UploadDateGTE(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldUploadDate, v))
}

// UploadDateLT applies the LT predicate on the "upload_date" field.
func UploadDateLT(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldUploadDate, v))
}

// UploadDateLTE applies the LTE predicate on the "upload_date" field.
func UploadDateLTE(v time.Time) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldUploadDate, v))
}

// UploadDateIsNil applies the IsNil predicate on the "upload_date" field.
func UploadDateIsNil() predicate.Media {
	return predicate.Media(sql.FieldIsNull(FieldUploadDate))
}

// UploadDateNotNil applies the NotNil predicate on the "upload_date" field.
func UploadDateNotNil() predicate.Media {
	return predicate.Media(sql.FieldNotNull(FieldUploadDate))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Attribute) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMediaAttributes applies the HasEdge predicate on the "media_attributes" edge.
func HasMediaAttributes() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MediaAttributesTable, MediaAttributesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaAttributesWith applies the HasEdge predicate on the "media_attributes" edge with a given conditions (other predicates).
func HasMediaAttributesWith(preds ...predicate.MediaAttribute) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		step := newMediaAttributesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Media) predicate.Media {
	return predicate.Media(sql.NotPredicates(p))
}
