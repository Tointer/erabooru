// Code generated by ent, DO NOT EDIT.

package media

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the media type in the database.
	Label = "media"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldUploadDate holds the string denoting the upload_date field in the database.
	FieldUploadDate = "upload_date"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeMediaAttributes holds the string denoting the media_attributes edge name in mutations.
	EdgeMediaAttributes = "media_attributes"
	// Table holds the table name of the media in the database.
	Table = "media"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "media_attributes"
	// TagsInverseTable is the table name for the Attribute entity.
	// It exists in this package in order to avoid circular dependency with the "attribute" package.
	TagsInverseTable = "attributes"
	// MediaAttributesTable is the table that holds the media_attributes relation/edge.
	MediaAttributesTable = "media_attributes"
	// MediaAttributesInverseTable is the table name for the MediaAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "mediaattribute" package.
	MediaAttributesInverseTable = "media_attributes"
	// MediaAttributesColumn is the table column denoting the media_attributes relation/edge.
	MediaAttributesColumn = "media_id"
)

// Columns holds all SQL columns for media fields.
var Columns = []string{
	FieldID,
	FieldFormat,
	FieldWidth,
	FieldHeight,
	FieldDuration,
	FieldUploadDate,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"media_id", "attribute_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Media queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByUploadDate orders the results by the upload_date field.
func ByUploadDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadDate, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaAttributesCount orders the results by media_attributes count.
func ByMediaAttributesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaAttributesStep(), opts...)
	}
}

// ByMediaAttributes orders the results by media_attributes terms.
func ByMediaAttributes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaAttributesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newMediaAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaAttributesInverseTable, MediaAttributesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, MediaAttributesTable, MediaAttributesColumn),
	)
}
