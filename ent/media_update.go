// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/media"
	"era/booru/ent/predicate"
	"era/booru/ent/tag"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDuration sets the "duration" field.
func (mu *MediaUpdate) SetDuration(i int16) *MediaUpdate {
	mu.mutation.ResetDuration()
	mu.mutation.SetDuration(i)
	return mu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDuration(i *int16) *MediaUpdate {
	if i != nil {
		mu.SetDuration(*i)
	}
	return mu
}

// AddDuration adds i to the "duration" field.
func (mu *MediaUpdate) AddDuration(i int16) *MediaUpdate {
	mu.mutation.AddDuration(i)
	return mu
}

// ClearDuration clears the value of the "duration" field.
func (mu *MediaUpdate) ClearDuration() *MediaUpdate {
	mu.mutation.ClearDuration()
	return mu
}

// SetUploadDate sets the "upload_date" field.
func (mu *MediaUpdate) SetUploadDate(t time.Time) *MediaUpdate {
	mu.mutation.SetUploadDate(t)
	return mu
}

// SetNillableUploadDate sets the "upload_date" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableUploadDate(t *time.Time) *MediaUpdate {
	if t != nil {
		mu.SetUploadDate(*t)
	}
	return mu
}

// ClearUploadDate clears the value of the "upload_date" field.
func (mu *MediaUpdate) ClearUploadDate() *MediaUpdate {
	mu.mutation.ClearUploadDate()
	return mu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (mu *MediaUpdate) AddTagIDs(ids ...int) *MediaUpdate {
	mu.mutation.AddTagIDs(ids...)
	return mu
}

// AddTags adds the "tags" edges to the Tag entity.
func (mu *MediaUpdate) AddTags(t ...*Tag) *MediaUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTagIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (mu *MediaUpdate) ClearTags() *MediaUpdate {
	mu.mutation.ClearTags()
	return mu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (mu *MediaUpdate) RemoveTagIDs(ids ...int) *MediaUpdate {
	mu.mutation.RemoveTagIDs(ids...)
	return mu
}

// RemoveTags removes "tags" edges to Tag entities.
func (mu *MediaUpdate) RemoveTags(t ...*Tag) *MediaUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Duration(); ok {
		_spec.SetField(media.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := mu.mutation.AddedDuration(); ok {
		_spec.AddField(media.FieldDuration, field.TypeInt16, value)
	}
	if mu.mutation.DurationCleared() {
		_spec.ClearField(media.FieldDuration, field.TypeInt16)
	}
	if value, ok := mu.mutation.UploadDate(); ok {
		_spec.SetField(media.FieldUploadDate, field.TypeTime, value)
	}
	if mu.mutation.UploadDateCleared() {
		_spec.ClearField(media.FieldUploadDate, field.TypeTime)
	}
	if mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetDuration sets the "duration" field.
func (muo *MediaUpdateOne) SetDuration(i int16) *MediaUpdateOne {
	muo.mutation.ResetDuration()
	muo.mutation.SetDuration(i)
	return muo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDuration(i *int16) *MediaUpdateOne {
	if i != nil {
		muo.SetDuration(*i)
	}
	return muo
}

// AddDuration adds i to the "duration" field.
func (muo *MediaUpdateOne) AddDuration(i int16) *MediaUpdateOne {
	muo.mutation.AddDuration(i)
	return muo
}

// ClearDuration clears the value of the "duration" field.
func (muo *MediaUpdateOne) ClearDuration() *MediaUpdateOne {
	muo.mutation.ClearDuration()
	return muo
}

// SetUploadDate sets the "upload_date" field.
func (muo *MediaUpdateOne) SetUploadDate(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUploadDate(t)
	return muo
}

// SetNillableUploadDate sets the "upload_date" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUploadDate(t *time.Time) *MediaUpdateOne {
	if t != nil {
		muo.SetUploadDate(*t)
	}
	return muo
}

// ClearUploadDate clears the value of the "upload_date" field.
func (muo *MediaUpdateOne) ClearUploadDate() *MediaUpdateOne {
	muo.mutation.ClearUploadDate()
	return muo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (muo *MediaUpdateOne) AddTagIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.AddTagIDs(ids...)
	return muo
}

// AddTags adds the "tags" edges to the Tag entity.
func (muo *MediaUpdateOne) AddTags(t ...*Tag) *MediaUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTagIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (muo *MediaUpdateOne) ClearTags() *MediaUpdateOne {
	muo.mutation.ClearTags()
	return muo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (muo *MediaUpdateOne) RemoveTagIDs(ids ...int) *MediaUpdateOne {
	muo.mutation.RemoveTagIDs(ids...)
	return muo
}

// RemoveTags removes "tags" edges to Tag entities.
func (muo *MediaUpdateOne) RemoveTags(t ...*Tag) *MediaUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Duration(); ok {
		_spec.SetField(media.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := muo.mutation.AddedDuration(); ok {
		_spec.AddField(media.FieldDuration, field.TypeInt16, value)
	}
	if muo.mutation.DurationCleared() {
		_spec.ClearField(media.FieldDuration, field.TypeInt16)
	}
	if value, ok := muo.mutation.UploadDate(); ok {
		_spec.SetField(media.FieldUploadDate, field.TypeTime, value)
	}
	if muo.mutation.UploadDateCleared() {
		_spec.ClearField(media.FieldUploadDate, field.TypeTime)
	}
	if muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   media.TagsTable,
			Columns: media.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
