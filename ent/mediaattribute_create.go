// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/attribute"
	"era/booru/ent/media"
	"era/booru/ent/mediaattribute"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaAttributeCreate is the builder for creating a MediaAttribute entity.
type MediaAttributeCreate struct {
	config
	mutation *MediaAttributeMutation
	hooks    []Hook
}

// SetMediaID sets the "media_id" field.
func (mac *MediaAttributeCreate) SetMediaID(s string) *MediaAttributeCreate {
	mac.mutation.SetMediaID(s)
	return mac
}

// SetAttributeID sets the "attribute_id" field.
func (mac *MediaAttributeCreate) SetAttributeID(i int) *MediaAttributeCreate {
	mac.mutation.SetAttributeID(i)
	return mac
}

// SetValue sets the "value" field.
func (mac *MediaAttributeCreate) SetValue(s string) *MediaAttributeCreate {
	mac.mutation.SetValue(s)
	return mac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mac *MediaAttributeCreate) SetNillableValue(s *string) *MediaAttributeCreate {
	if s != nil {
		mac.SetValue(*s)
	}
	return mac
}

// SetMedia sets the "media" edge to the Media entity.
func (mac *MediaAttributeCreate) SetMedia(m *Media) *MediaAttributeCreate {
	return mac.SetMediaID(m.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (mac *MediaAttributeCreate) SetAttribute(a *Attribute) *MediaAttributeCreate {
	return mac.SetAttributeID(a.ID)
}

// Mutation returns the MediaAttributeMutation object of the builder.
func (mac *MediaAttributeCreate) Mutation() *MediaAttributeMutation {
	return mac.mutation
}

// Save creates the MediaAttribute in the database.
func (mac *MediaAttributeCreate) Save(ctx context.Context) (*MediaAttribute, error) {
	return withHooks(ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MediaAttributeCreate) SaveX(ctx context.Context) *MediaAttribute {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MediaAttributeCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MediaAttributeCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MediaAttributeCreate) check() error {
	if _, ok := mac.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media_id", err: errors.New(`ent: missing required field "MediaAttribute.media_id"`)}
	}
	if _, ok := mac.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute_id", err: errors.New(`ent: missing required field "MediaAttribute.attribute_id"`)}
	}
	if len(mac.mutation.MediaIDs()) == 0 {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required edge "MediaAttribute.media"`)}
	}
	if len(mac.mutation.AttributeIDs()) == 0 {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required edge "MediaAttribute.attribute"`)}
	}
	return nil
}

func (mac *MediaAttributeCreate) sqlSave(ctx context.Context) (*MediaAttribute, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (mac *MediaAttributeCreate) createSpec() (*MediaAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaAttribute{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(mediaattribute.Table, nil)
	)
	if value, ok := mac.mutation.Value(); ok {
		_spec.SetField(mediaattribute.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if nodes := mac.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.MediaTable,
			Columns: []string{mediaattribute.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MediaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mac.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.AttributeTable,
			Columns: []string{mediaattribute.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaAttributeCreateBulk is the builder for creating many MediaAttribute entities in bulk.
type MediaAttributeCreateBulk struct {
	config
	err      error
	builders []*MediaAttributeCreate
}

// Save creates the MediaAttribute entities in the database.
func (macb *MediaAttributeCreateBulk) Save(ctx context.Context) ([]*MediaAttribute, error) {
	if macb.err != nil {
		return nil, macb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MediaAttribute, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MediaAttributeCreateBulk) SaveX(ctx context.Context) []*MediaAttribute {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MediaAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MediaAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
