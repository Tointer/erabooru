// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/attribute"
	"era/booru/ent/media"
	"era/booru/ent/mediaattribute"
	"era/booru/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaAttributeUpdate is the builder for updating MediaAttribute entities.
type MediaAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *MediaAttributeMutation
}

// Where appends a list predicates to the MediaAttributeUpdate builder.
func (mau *MediaAttributeUpdate) Where(ps ...predicate.MediaAttribute) *MediaAttributeUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetMediaID sets the "media_id" field.
func (mau *MediaAttributeUpdate) SetMediaID(s string) *MediaAttributeUpdate {
	mau.mutation.SetMediaID(s)
	return mau
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (mau *MediaAttributeUpdate) SetNillableMediaID(s *string) *MediaAttributeUpdate {
	if s != nil {
		mau.SetMediaID(*s)
	}
	return mau
}

// SetAttributeID sets the "attribute_id" field.
func (mau *MediaAttributeUpdate) SetAttributeID(i int) *MediaAttributeUpdate {
	mau.mutation.SetAttributeID(i)
	return mau
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (mau *MediaAttributeUpdate) SetNillableAttributeID(i *int) *MediaAttributeUpdate {
	if i != nil {
		mau.SetAttributeID(*i)
	}
	return mau
}

// SetValue sets the "value" field.
func (mau *MediaAttributeUpdate) SetValue(s string) *MediaAttributeUpdate {
	mau.mutation.SetValue(s)
	return mau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mau *MediaAttributeUpdate) SetNillableValue(s *string) *MediaAttributeUpdate {
	if s != nil {
		mau.SetValue(*s)
	}
	return mau
}

// ClearValue clears the value of the "value" field.
func (mau *MediaAttributeUpdate) ClearValue() *MediaAttributeUpdate {
	mau.mutation.ClearValue()
	return mau
}

// SetMedia sets the "media" edge to the Media entity.
func (mau *MediaAttributeUpdate) SetMedia(m *Media) *MediaAttributeUpdate {
	return mau.SetMediaID(m.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (mau *MediaAttributeUpdate) SetAttribute(a *Attribute) *MediaAttributeUpdate {
	return mau.SetAttributeID(a.ID)
}

// Mutation returns the MediaAttributeMutation object of the builder.
func (mau *MediaAttributeUpdate) Mutation() *MediaAttributeMutation {
	return mau.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (mau *MediaAttributeUpdate) ClearMedia() *MediaAttributeUpdate {
	mau.mutation.ClearMedia()
	return mau
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (mau *MediaAttributeUpdate) ClearAttribute() *MediaAttributeUpdate {
	mau.mutation.ClearAttribute()
	return mau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *MediaAttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MediaAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MediaAttributeUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MediaAttributeUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mau *MediaAttributeUpdate) check() error {
	if mau.mutation.MediaCleared() && len(mau.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaAttribute.media"`)
	}
	if mau.mutation.AttributeCleared() && len(mau.mutation.AttributeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaAttribute.attribute"`)
	}
	return nil
}

func (mau *MediaAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mediaattribute.Table, mediaattribute.Columns, sqlgraph.NewFieldSpec(mediaattribute.FieldMediaID, field.TypeString), sqlgraph.NewFieldSpec(mediaattribute.FieldAttributeID, field.TypeInt))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.Value(); ok {
		_spec.SetField(mediaattribute.FieldValue, field.TypeString, value)
	}
	if mau.mutation.ValueCleared() {
		_spec.ClearField(mediaattribute.FieldValue, field.TypeString)
	}
	if mau.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.MediaTable,
			Columns: []string{mediaattribute.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.MediaTable,
			Columns: []string{mediaattribute.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mau.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.AttributeTable,
			Columns: []string{mediaattribute.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.AttributeTable,
			Columns: []string{mediaattribute.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediaattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// MediaAttributeUpdateOne is the builder for updating a single MediaAttribute entity.
type MediaAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaAttributeMutation
}

// SetMediaID sets the "media_id" field.
func (mauo *MediaAttributeUpdateOne) SetMediaID(s string) *MediaAttributeUpdateOne {
	mauo.mutation.SetMediaID(s)
	return mauo
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (mauo *MediaAttributeUpdateOne) SetNillableMediaID(s *string) *MediaAttributeUpdateOne {
	if s != nil {
		mauo.SetMediaID(*s)
	}
	return mauo
}

// SetAttributeID sets the "attribute_id" field.
func (mauo *MediaAttributeUpdateOne) SetAttributeID(i int) *MediaAttributeUpdateOne {
	mauo.mutation.SetAttributeID(i)
	return mauo
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (mauo *MediaAttributeUpdateOne) SetNillableAttributeID(i *int) *MediaAttributeUpdateOne {
	if i != nil {
		mauo.SetAttributeID(*i)
	}
	return mauo
}

// SetValue sets the "value" field.
func (mauo *MediaAttributeUpdateOne) SetValue(s string) *MediaAttributeUpdateOne {
	mauo.mutation.SetValue(s)
	return mauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mauo *MediaAttributeUpdateOne) SetNillableValue(s *string) *MediaAttributeUpdateOne {
	if s != nil {
		mauo.SetValue(*s)
	}
	return mauo
}

// ClearValue clears the value of the "value" field.
func (mauo *MediaAttributeUpdateOne) ClearValue() *MediaAttributeUpdateOne {
	mauo.mutation.ClearValue()
	return mauo
}

// SetMedia sets the "media" edge to the Media entity.
func (mauo *MediaAttributeUpdateOne) SetMedia(m *Media) *MediaAttributeUpdateOne {
	return mauo.SetMediaID(m.ID)
}

// SetAttribute sets the "attribute" edge to the Attribute entity.
func (mauo *MediaAttributeUpdateOne) SetAttribute(a *Attribute) *MediaAttributeUpdateOne {
	return mauo.SetAttributeID(a.ID)
}

// Mutation returns the MediaAttributeMutation object of the builder.
func (mauo *MediaAttributeUpdateOne) Mutation() *MediaAttributeMutation {
	return mauo.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (mauo *MediaAttributeUpdateOne) ClearMedia() *MediaAttributeUpdateOne {
	mauo.mutation.ClearMedia()
	return mauo
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (mauo *MediaAttributeUpdateOne) ClearAttribute() *MediaAttributeUpdateOne {
	mauo.mutation.ClearAttribute()
	return mauo
}

// Where appends a list predicates to the MediaAttributeUpdate builder.
func (mauo *MediaAttributeUpdateOne) Where(ps ...predicate.MediaAttribute) *MediaAttributeUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *MediaAttributeUpdateOne) Select(field string, fields ...string) *MediaAttributeUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated MediaAttribute entity.
func (mauo *MediaAttributeUpdateOne) Save(ctx context.Context) (*MediaAttribute, error) {
	return withHooks(ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MediaAttributeUpdateOne) SaveX(ctx context.Context) *MediaAttribute {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *MediaAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MediaAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mauo *MediaAttributeUpdateOne) check() error {
	if mauo.mutation.MediaCleared() && len(mauo.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaAttribute.media"`)
	}
	if mauo.mutation.AttributeCleared() && len(mauo.mutation.AttributeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaAttribute.attribute"`)
	}
	return nil
}

func (mauo *MediaAttributeUpdateOne) sqlSave(ctx context.Context) (_node *MediaAttribute, err error) {
	if err := mauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mediaattribute.Table, mediaattribute.Columns, sqlgraph.NewFieldSpec(mediaattribute.FieldMediaID, field.TypeString), sqlgraph.NewFieldSpec(mediaattribute.FieldAttributeID, field.TypeInt))
	if id, ok := mauo.mutation.MediaID(); !ok {
		return nil, &ValidationError{Name: "media_id", err: errors.New(`ent: missing "MediaAttribute.media_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := mauo.mutation.AttributeID(); !ok {
		return nil, &ValidationError{Name: "attribute_id", err: errors.New(`ent: missing "MediaAttribute.attribute_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !mediaattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.Value(); ok {
		_spec.SetField(mediaattribute.FieldValue, field.TypeString, value)
	}
	if mauo.mutation.ValueCleared() {
		_spec.ClearField(mediaattribute.FieldValue, field.TypeString)
	}
	if mauo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.MediaTable,
			Columns: []string{mediaattribute.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.MediaTable,
			Columns: []string{mediaattribute.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mauo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.AttributeTable,
			Columns: []string{mediaattribute.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediaattribute.AttributeTable,
			Columns: []string{mediaattribute.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MediaAttribute{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediaattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
