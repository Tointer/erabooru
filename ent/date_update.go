// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/date"
	"era/booru/ent/media"
	"era/booru/ent/mediadate"
	"era/booru/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DateUpdate is the builder for updating Date entities.
type DateUpdate struct {
	config
	hooks    []Hook
	mutation *DateMutation
}

// Where appends a list predicates to the DateUpdate builder.
func (du *DateUpdate) Where(ps ...predicate.Date) *DateUpdate {
	du.mutation.Where(ps...)
	return du
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (du *DateUpdate) AddMediumIDs(ids ...string) *DateUpdate {
	du.mutation.AddMediumIDs(ids...)
	return du
}

// AddMedia adds the "media" edges to the Media entity.
func (du *DateUpdate) AddMedia(m ...*Media) *DateUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMediumIDs(ids...)
}

// AddMediaDateIDs adds the "media_dates" edge to the MediaDate entity by IDs.
func (du *DateUpdate) AddMediaDateIDs(ids ...int) *DateUpdate {
	du.mutation.AddMediaDateIDs(ids...)
	return du
}

// AddMediaDates adds the "media_dates" edges to the MediaDate entity.
func (du *DateUpdate) AddMediaDates(m ...*MediaDate) *DateUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMediaDateIDs(ids...)
}

// Mutation returns the DateMutation object of the builder.
func (du *DateUpdate) Mutation() *DateMutation {
	return du.mutation
}

// ClearMedia clears all "media" edges to the Media entity.
func (du *DateUpdate) ClearMedia() *DateUpdate {
	du.mutation.ClearMedia()
	return du
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (du *DateUpdate) RemoveMediumIDs(ids ...string) *DateUpdate {
	du.mutation.RemoveMediumIDs(ids...)
	return du
}

// RemoveMedia removes "media" edges to Media entities.
func (du *DateUpdate) RemoveMedia(m ...*Media) *DateUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMediumIDs(ids...)
}

// ClearMediaDates clears all "media_dates" edges to the MediaDate entity.
func (du *DateUpdate) ClearMediaDates() *DateUpdate {
	du.mutation.ClearMediaDates()
	return du
}

// RemoveMediaDateIDs removes the "media_dates" edge to MediaDate entities by IDs.
func (du *DateUpdate) RemoveMediaDateIDs(ids ...int) *DateUpdate {
	du.mutation.RemoveMediaDateIDs(ids...)
	return du
}

// RemoveMediaDates removes "media_dates" edges to MediaDate entities.
func (du *DateUpdate) RemoveMediaDates(m ...*MediaDate) *DateUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMediaDateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DateUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DateUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DateUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(date.Table, date.Columns, sqlgraph.NewFieldSpec(date.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMediaIDs(); len(nodes) > 0 && !du.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.MediaDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedMediaDatesIDs(); len(nodes) > 0 && !du.mutation.MediaDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MediaDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{date.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DateUpdateOne is the builder for updating a single Date entity.
type DateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DateMutation
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (duo *DateUpdateOne) AddMediumIDs(ids ...string) *DateUpdateOne {
	duo.mutation.AddMediumIDs(ids...)
	return duo
}

// AddMedia adds the "media" edges to the Media entity.
func (duo *DateUpdateOne) AddMedia(m ...*Media) *DateUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMediumIDs(ids...)
}

// AddMediaDateIDs adds the "media_dates" edge to the MediaDate entity by IDs.
func (duo *DateUpdateOne) AddMediaDateIDs(ids ...int) *DateUpdateOne {
	duo.mutation.AddMediaDateIDs(ids...)
	return duo
}

// AddMediaDates adds the "media_dates" edges to the MediaDate entity.
func (duo *DateUpdateOne) AddMediaDates(m ...*MediaDate) *DateUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMediaDateIDs(ids...)
}

// Mutation returns the DateMutation object of the builder.
func (duo *DateUpdateOne) Mutation() *DateMutation {
	return duo.mutation
}

// ClearMedia clears all "media" edges to the Media entity.
func (duo *DateUpdateOne) ClearMedia() *DateUpdateOne {
	duo.mutation.ClearMedia()
	return duo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (duo *DateUpdateOne) RemoveMediumIDs(ids ...string) *DateUpdateOne {
	duo.mutation.RemoveMediumIDs(ids...)
	return duo
}

// RemoveMedia removes "media" edges to Media entities.
func (duo *DateUpdateOne) RemoveMedia(m ...*Media) *DateUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMediumIDs(ids...)
}

// ClearMediaDates clears all "media_dates" edges to the MediaDate entity.
func (duo *DateUpdateOne) ClearMediaDates() *DateUpdateOne {
	duo.mutation.ClearMediaDates()
	return duo
}

// RemoveMediaDateIDs removes the "media_dates" edge to MediaDate entities by IDs.
func (duo *DateUpdateOne) RemoveMediaDateIDs(ids ...int) *DateUpdateOne {
	duo.mutation.RemoveMediaDateIDs(ids...)
	return duo
}

// RemoveMediaDates removes "media_dates" edges to MediaDate entities.
func (duo *DateUpdateOne) RemoveMediaDates(m ...*MediaDate) *DateUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMediaDateIDs(ids...)
}

// Where appends a list predicates to the DateUpdate builder.
func (duo *DateUpdateOne) Where(ps ...predicate.Date) *DateUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DateUpdateOne) Select(field string, fields ...string) *DateUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Date entity.
func (duo *DateUpdateOne) Save(ctx context.Context) (*Date, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DateUpdateOne) SaveX(ctx context.Context) *Date {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DateUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DateUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DateUpdateOne) sqlSave(ctx context.Context) (_node *Date, err error) {
	_spec := sqlgraph.NewUpdateSpec(date.Table, date.Columns, sqlgraph.NewFieldSpec(date.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Date.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, date.FieldID)
		for _, f := range fields {
			if !date.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != date.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !duo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   date.MediaTable,
			Columns: date.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.MediaDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedMediaDatesIDs(); len(nodes) > 0 && !duo.mutation.MediaDatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MediaDatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   date.MediaDatesTable,
			Columns: []string{date.MediaDatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Date{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{date.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
