// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/attribute"
	"era/booru/ent/media"
	"era/booru/ent/mediaattribute"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MediaAttribute is the model entity for the MediaAttribute schema.
type MediaAttribute struct {
	config `json:"-"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// AttributeID holds the value of the "attribute_id" field.
	AttributeID int `json:"attribute_id,omitempty"`
	// Value for the attribute; null for tag type
	Value *string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaAttributeQuery when eager-loading is set.
	Edges        MediaAttributeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaAttributeEdges holds the relations/edges for other nodes in the graph.
type MediaAttributeEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaAttributeEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaAttributeEdges) AttributeOrErr() (*Attribute, error) {
	if e.Attribute != nil {
		return e.Attribute, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: attribute.Label}
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediaattribute.FieldAttributeID:
			values[i] = new(sql.NullInt64)
		case mediaattribute.FieldMediaID, mediaattribute.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaAttribute fields.
func (ma *MediaAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediaattribute.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				ma.MediaID = value.String
			}
		case mediaattribute.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				ma.AttributeID = int(value.Int64)
			}
		case mediaattribute.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ma.Value = new(string)
				*ma.Value = value.String
			}
		default:
			ma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the MediaAttribute.
// This includes values selected through modifiers, order, etc.
func (ma *MediaAttribute) GetValue(name string) (ent.Value, error) {
	return ma.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the MediaAttribute entity.
func (ma *MediaAttribute) QueryMedia() *MediaQuery {
	return NewMediaAttributeClient(ma.config).QueryMedia(ma)
}

// QueryAttribute queries the "attribute" edge of the MediaAttribute entity.
func (ma *MediaAttribute) QueryAttribute() *AttributeQuery {
	return NewMediaAttributeClient(ma.config).QueryAttribute(ma)
}

// Update returns a builder for updating this MediaAttribute.
// Note that you need to call MediaAttribute.Unwrap() before calling this method if this MediaAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MediaAttribute) Update() *MediaAttributeUpdateOne {
	return NewMediaAttributeClient(ma.config).UpdateOne(ma)
}

// Unwrap unwraps the MediaAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MediaAttribute) Unwrap() *MediaAttribute {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaAttribute is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MediaAttribute) String() string {
	var builder strings.Builder
	builder.WriteString("MediaAttribute(")
	builder.WriteString("media_id=")
	builder.WriteString(ma.MediaID)
	builder.WriteString(", ")
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", ma.AttributeID))
	builder.WriteString(", ")
	if v := ma.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// MediaAttributes is a parsable slice of MediaAttribute.
type MediaAttributes []*MediaAttribute
