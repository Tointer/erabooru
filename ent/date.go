// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/date"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Date is the model entity for the Date schema.
type Date struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for the date name
	ID int `json:"id,omitempty"`
	// Name of the date entry
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DateQuery when eager-loading is set.
	Edges        DateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DateEdges holds the relations/edges for other nodes in the graph.
type DateEdges struct {
	// Media items associated with this date
	Media []*Media `json:"media,omitempty"`
	// MediaDates holds the value of the media_dates edge.
	MediaDates []*MediaDate `json:"media_dates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e DateEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[0] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// MediaDatesOrErr returns the MediaDates value or an error if the edge
// was not loaded in eager-loading.
func (e DateEdges) MediaDatesOrErr() ([]*MediaDate, error) {
	if e.loadedTypes[1] {
		return e.MediaDates, nil
	}
	return nil, &NotLoadedError{edge: "media_dates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Date) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case date.FieldID:
			values[i] = new(sql.NullInt64)
		case date.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Date fields.
func (d *Date) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case date.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case date.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Date.
// This includes values selected through modifiers, order, etc.
func (d *Date) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the Date entity.
func (d *Date) QueryMedia() *MediaQuery {
	return NewDateClient(d.config).QueryMedia(d)
}

// QueryMediaDates queries the "media_dates" edge of the Date entity.
func (d *Date) QueryMediaDates() *MediaDateQuery {
	return NewDateClient(d.config).QueryMediaDates(d)
}

// Update returns a builder for updating this Date.
// Note that you need to call Date.Unwrap() before calling this method if this Date
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Date) Update() *DateUpdateOne {
	return NewDateClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Date entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Date) Unwrap() *Date {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Date is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Date) String() string {
	var builder strings.Builder
	builder.WriteString("Date(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Dates is a parsable slice of Date.
type Dates []*Date
