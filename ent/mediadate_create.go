// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/date"
	"era/booru/ent/media"
	"era/booru/ent/mediadate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaDateCreate is the builder for creating a MediaDate entity.
type MediaDateCreate struct {
	config
	mutation *MediaDateMutation
	hooks    []Hook
}

// SetMediaID sets the "media_id" field.
func (mdc *MediaDateCreate) SetMediaID(s string) *MediaDateCreate {
	mdc.mutation.SetMediaID(s)
	return mdc
}

// SetDateID sets the "date_id" field.
func (mdc *MediaDateCreate) SetDateID(i int) *MediaDateCreate {
	mdc.mutation.SetDateID(i)
	return mdc
}

// SetValue sets the "value" field.
func (mdc *MediaDateCreate) SetValue(t time.Time) *MediaDateCreate {
	mdc.mutation.SetValue(t)
	return mdc
}

// SetMedia sets the "media" edge to the Media entity.
func (mdc *MediaDateCreate) SetMedia(m *Media) *MediaDateCreate {
	return mdc.SetMediaID(m.ID)
}

// SetDate sets the "date" edge to the Date entity.
func (mdc *MediaDateCreate) SetDate(d *Date) *MediaDateCreate {
	return mdc.SetDateID(d.ID)
}

// Mutation returns the MediaDateMutation object of the builder.
func (mdc *MediaDateCreate) Mutation() *MediaDateMutation {
	return mdc.mutation
}

// Save creates the MediaDate in the database.
func (mdc *MediaDateCreate) Save(ctx context.Context) (*MediaDate, error) {
	return withHooks(ctx, mdc.sqlSave, mdc.mutation, mdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *MediaDateCreate) SaveX(ctx context.Context) *MediaDate {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdc *MediaDateCreate) Exec(ctx context.Context) error {
	_, err := mdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdc *MediaDateCreate) ExecX(ctx context.Context) {
	if err := mdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdc *MediaDateCreate) check() error {
	if _, ok := mdc.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media_id", err: errors.New(`ent: missing required field "MediaDate.media_id"`)}
	}
	if _, ok := mdc.mutation.DateID(); !ok {
		return &ValidationError{Name: "date_id", err: errors.New(`ent: missing required field "MediaDate.date_id"`)}
	}
	if _, ok := mdc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "MediaDate.value"`)}
	}
	if len(mdc.mutation.MediaIDs()) == 0 {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required edge "MediaDate.media"`)}
	}
	if len(mdc.mutation.DateIDs()) == 0 {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required edge "MediaDate.date"`)}
	}
	return nil
}

func (mdc *MediaDateCreate) sqlSave(ctx context.Context) (*MediaDate, error) {
	if err := mdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mdc.mutation.id = &_node.ID
	mdc.mutation.done = true
	return _node, nil
}

func (mdc *MediaDateCreate) createSpec() (*MediaDate, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaDate{config: mdc.config}
		_spec = sqlgraph.NewCreateSpec(mediadate.Table, sqlgraph.NewFieldSpec(mediadate.FieldID, field.TypeInt))
	)
	if value, ok := mdc.mutation.Value(); ok {
		_spec.SetField(mediadate.FieldValue, field.TypeTime, value)
		_node.Value = value
	}
	if nodes := mdc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediadate.MediaTable,
			Columns: []string{mediadate.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MediaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdc.mutation.DateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediadate.DateTable,
			Columns: []string{mediadate.DateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(date.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaDateCreateBulk is the builder for creating many MediaDate entities in bulk.
type MediaDateCreateBulk struct {
	config
	err      error
	builders []*MediaDateCreate
}

// Save creates the MediaDate entities in the database.
func (mdcb *MediaDateCreateBulk) Save(ctx context.Context) ([]*MediaDate, error) {
	if mdcb.err != nil {
		return nil, mdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*MediaDate, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaDateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *MediaDateCreateBulk) SaveX(ctx context.Context) []*MediaDate {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdcb *MediaDateCreateBulk) Exec(ctx context.Context) error {
	_, err := mdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdcb *MediaDateCreateBulk) ExecX(ctx context.Context) {
	if err := mdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
