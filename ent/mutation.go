// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/attribute"
	"era/booru/ent/media"
	"era/booru/ent/mediaattribute"
	"era/booru/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttribute      = "Attribute"
	TypeMedia          = "Media"
	TypeMediaAttribute = "MediaAttribute"
)

// AttributeMutation represents an operation that mutates the Attribute nodes in the graph.
type AttributeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	_type         *attribute.Type
	clearedFields map[string]struct{}
	media         map[string]struct{}
	removedmedia  map[string]struct{}
	clearedmedia  bool
	done          bool
	oldValue      func(context.Context) (*Attribute, error)
	predicates    []predicate.Attribute
}

var _ ent.Mutation = (*AttributeMutation)(nil)

// attributeOption allows management of the mutation configuration using functional options.
type attributeOption func(*AttributeMutation)

// newAttributeMutation creates new mutation for the Attribute entity.
func newAttributeMutation(c config, op Op, opts ...attributeOption) *AttributeMutation {
	m := &AttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeID sets the ID field of the mutation.
func withAttributeID(id int) attributeOption {
	return func(m *AttributeMutation) {
		var (
			err   error
			once  sync.Once
			value *Attribute
		)
		m.oldValue = func(ctx context.Context) (*Attribute, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attribute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttribute sets the old Attribute of the mutation.
func withAttribute(node *Attribute) attributeOption {
	return func(m *AttributeMutation) {
		m.oldValue = func(context.Context) (*Attribute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attribute entities.
func (m *AttributeMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attribute.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AttributeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AttributeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AttributeMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *AttributeMutation) SetType(a attribute.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *AttributeMutation) GetType() (r attribute.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Attribute entity.
// If the Attribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeMutation) OldType(ctx context.Context) (v attribute.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AttributeMutation) ResetType() {
	m._type = nil
}

// AddMediumIDs adds the "media" edge to the Media entity by ids.
func (m *AttributeMutation) AddMediumIDs(ids ...string) {
	if m.media == nil {
		m.media = make(map[string]struct{})
	}
	for i := range ids {
		m.media[ids[i]] = struct{}{}
	}
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *AttributeMutation) ClearMedia() {
	m.clearedmedia = true
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *AttributeMutation) MediaCleared() bool {
	return m.clearedmedia
}

// RemoveMediumIDs removes the "media" edge to the Media entity by IDs.
func (m *AttributeMutation) RemoveMediumIDs(ids ...string) {
	if m.removedmedia == nil {
		m.removedmedia = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.media, ids[i])
		m.removedmedia[ids[i]] = struct{}{}
	}
}

// RemovedMedia returns the removed IDs of the "media" edge to the Media entity.
func (m *AttributeMutation) RemovedMediaIDs() (ids []string) {
	for id := range m.removedmedia {
		ids = append(ids, id)
	}
	return
}

// MediaIDs returns the "media" edge IDs in the mutation.
func (m *AttributeMutation) MediaIDs() (ids []string) {
	for id := range m.media {
		ids = append(ids, id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *AttributeMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
	m.removedmedia = nil
}

// Where appends a list predicates to the AttributeMutation builder.
func (m *AttributeMutation) Where(ps ...predicate.Attribute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttributeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttributeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attribute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttributeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttributeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attribute).
func (m *AttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, attribute.FieldName)
	}
	if m._type != nil {
		fields = append(fields, attribute.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attribute.FieldName:
		return m.Name()
	case attribute.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attribute.FieldName:
		return m.OldName(ctx)
	case attribute.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Attribute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attribute.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case attribute.FieldType:
		v, ok := value.(attribute.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeMutation) ResetField(name string) error {
	switch name {
	case attribute.FieldName:
		m.ResetName()
		return nil
	case attribute.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Attribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.media != nil {
		edges = append(edges, attribute.EdgeMedia)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.media))
		for id := range m.media {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedia != nil {
		edges = append(edges, attribute.EdgeMedia)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case attribute.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.removedmedia))
		for id := range m.removedmedia {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmedia {
		edges = append(edges, attribute.EdgeMedia)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeMutation) EdgeCleared(name string) bool {
	switch name {
	case attribute.EdgeMedia:
		return m.clearedmedia
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Attribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeMutation) ResetEdge(name string) error {
	switch name {
	case attribute.EdgeMedia:
		m.ResetMedia()
		return nil
	}
	return fmt.Errorf("unknown Attribute edge %s", name)
}

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op            Op
	typ           string
	id            *string
	format        *string
	width         *int16
	addwidth      *int16
	height        *int16
	addheight     *int16
	duration      *int16
	addduration   *int16
	upload_date   *time.Time
	clearedFields map[string]struct{}
	tags          map[int]struct{}
	removedtags   map[int]struct{}
	clearedtags   bool
	done          bool
	oldValue      func(context.Context) (*Media, error)
	predicates    []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id string) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Media entities.
func (m *MediaMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Media.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormat sets the "format" field.
func (m *MediaMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *MediaMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *MediaMutation) ResetFormat() {
	m.format = nil
}

// SetWidth sets the "width" field.
func (m *MediaMutation) SetWidth(i int16) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *MediaMutation) Width() (r int16, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldWidth(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *MediaMutation) AddWidth(i int16) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *MediaMutation) AddedWidth() (r int16, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *MediaMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the "height" field.
func (m *MediaMutation) SetHeight(i int16) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *MediaMutation) Height() (r int16, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldHeight(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *MediaMutation) AddHeight(i int16) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *MediaMutation) AddedHeight() (r int16, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *MediaMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetDuration sets the "duration" field.
func (m *MediaMutation) SetDuration(i int16) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *MediaMutation) Duration() (r int16, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldDuration(ctx context.Context) (v *int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *MediaMutation) AddDuration(i int16) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *MediaMutation) AddedDuration() (r int16, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *MediaMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[media.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *MediaMutation) DurationCleared() bool {
	_, ok := m.clearedFields[media.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *MediaMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, media.FieldDuration)
}

// SetUploadDate sets the "upload_date" field.
func (m *MediaMutation) SetUploadDate(t time.Time) {
	m.upload_date = &t
}

// UploadDate returns the value of the "upload_date" field in the mutation.
func (m *MediaMutation) UploadDate() (r time.Time, exists bool) {
	v := m.upload_date
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadDate returns the old "upload_date" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUploadDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadDate: %w", err)
	}
	return oldValue.UploadDate, nil
}

// ClearUploadDate clears the value of the "upload_date" field.
func (m *MediaMutation) ClearUploadDate() {
	m.upload_date = nil
	m.clearedFields[media.FieldUploadDate] = struct{}{}
}

// UploadDateCleared returns if the "upload_date" field was cleared in this mutation.
func (m *MediaMutation) UploadDateCleared() bool {
	_, ok := m.clearedFields[media.FieldUploadDate]
	return ok
}

// ResetUploadDate resets all changes to the "upload_date" field.
func (m *MediaMutation) ResetUploadDate() {
	m.upload_date = nil
	delete(m.clearedFields, media.FieldUploadDate)
}

// AddTagIDs adds the "tags" edge to the Attribute entity by ids.
func (m *MediaMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Attribute entity.
func (m *MediaMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Attribute entity was cleared.
func (m *MediaMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Attribute entity by IDs.
func (m *MediaMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Attribute entity.
func (m *MediaMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *MediaMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *MediaMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// Where appends a list predicates to the MediaMutation builder.
func (m *MediaMutation) Where(ps ...predicate.Media) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Media, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.format != nil {
		fields = append(fields, media.FieldFormat)
	}
	if m.width != nil {
		fields = append(fields, media.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, media.FieldHeight)
	}
	if m.duration != nil {
		fields = append(fields, media.FieldDuration)
	}
	if m.upload_date != nil {
		fields = append(fields, media.FieldUploadDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldFormat:
		return m.Format()
	case media.FieldWidth:
		return m.Width()
	case media.FieldHeight:
		return m.Height()
	case media.FieldDuration:
		return m.Duration()
	case media.FieldUploadDate:
		return m.UploadDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldFormat:
		return m.OldFormat(ctx)
	case media.FieldWidth:
		return m.OldWidth(ctx)
	case media.FieldHeight:
		return m.OldHeight(ctx)
	case media.FieldDuration:
		return m.OldDuration(ctx)
	case media.FieldUploadDate:
		return m.OldUploadDate(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case media.FieldWidth:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case media.FieldHeight:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case media.FieldDuration:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case media.FieldUploadDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadDate(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	var fields []string
	if m.addwidth != nil {
		fields = append(fields, media.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, media.FieldHeight)
	}
	if m.addduration != nil {
		fields = append(fields, media.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case media.FieldWidth:
		return m.AddedWidth()
	case media.FieldHeight:
		return m.AddedHeight()
	case media.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case media.FieldWidth:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case media.FieldHeight:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case media.FieldDuration:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(media.FieldDuration) {
		fields = append(fields, media.FieldDuration)
	}
	if m.FieldCleared(media.FieldUploadDate) {
		fields = append(fields, media.FieldUploadDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	switch name {
	case media.FieldDuration:
		m.ClearDuration()
		return nil
	case media.FieldUploadDate:
		m.ClearUploadDate()
		return nil
	}
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldFormat:
		m.ResetFormat()
		return nil
	case media.FieldWidth:
		m.ResetWidth()
		return nil
	case media.FieldHeight:
		m.ResetHeight()
		return nil
	case media.FieldDuration:
		m.ResetDuration()
		return nil
	case media.FieldUploadDate:
		m.ResetUploadDate()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tags != nil {
		edges = append(edges, media.EdgeTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtags != nil {
		edges = append(edges, media.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtags {
		edges = append(edges, media.EdgeTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	switch name {
	case media.EdgeTags:
		return m.clearedtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	switch name {
	case media.EdgeTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown Media edge %s", name)
}

// MediaAttributeMutation represents an operation that mutates the MediaAttribute nodes in the graph.
type MediaAttributeMutation struct {
	config
	op               Op
	typ              string
	value            *string
	clearedFields    map[string]struct{}
	media            *string
	clearedmedia     bool
	attribute        *int
	clearedattribute bool
	done             bool
	oldValue         func(context.Context) (*MediaAttribute, error)
	predicates       []predicate.MediaAttribute
}

var _ ent.Mutation = (*MediaAttributeMutation)(nil)

// mediaattributeOption allows management of the mutation configuration using functional options.
type mediaattributeOption func(*MediaAttributeMutation)

// newMediaAttributeMutation creates new mutation for the MediaAttribute entity.
func newMediaAttributeMutation(c config, op Op, opts ...mediaattributeOption) *MediaAttributeMutation {
	m := &MediaAttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaAttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaAttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetMediaID sets the "media_id" field.
func (m *MediaAttributeMutation) SetMediaID(s string) {
	m.media = &s
}

// MediaID returns the value of the "media_id" field in the mutation.
func (m *MediaAttributeMutation) MediaID() (r string, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// ResetMediaID resets all changes to the "media_id" field.
func (m *MediaAttributeMutation) ResetMediaID() {
	m.media = nil
}

// SetAttributeID sets the "attribute_id" field.
func (m *MediaAttributeMutation) SetAttributeID(i int) {
	m.attribute = &i
}

// AttributeID returns the value of the "attribute_id" field in the mutation.
func (m *MediaAttributeMutation) AttributeID() (r int, exists bool) {
	v := m.attribute
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttributeID resets all changes to the "attribute_id" field.
func (m *MediaAttributeMutation) ResetAttributeID() {
	m.attribute = nil
}

// SetValue sets the "value" field.
func (m *MediaAttributeMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *MediaAttributeMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// ClearValue clears the value of the "value" field.
func (m *MediaAttributeMutation) ClearValue() {
	m.value = nil
	m.clearedFields[mediaattribute.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *MediaAttributeMutation) ValueCleared() bool {
	_, ok := m.clearedFields[mediaattribute.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *MediaAttributeMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, mediaattribute.FieldValue)
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *MediaAttributeMutation) ClearMedia() {
	m.clearedmedia = true
	m.clearedFields[mediaattribute.FieldMediaID] = struct{}{}
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *MediaAttributeMutation) MediaCleared() bool {
	return m.clearedmedia
}

// MediaIDs returns the "media" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MediaID instead. It exists only for internal usage by the builders.
func (m *MediaAttributeMutation) MediaIDs() (ids []string) {
	if id := m.media; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *MediaAttributeMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
}

// ClearAttribute clears the "attribute" edge to the Attribute entity.
func (m *MediaAttributeMutation) ClearAttribute() {
	m.clearedattribute = true
	m.clearedFields[mediaattribute.FieldAttributeID] = struct{}{}
}

// AttributeCleared reports if the "attribute" edge to the Attribute entity was cleared.
func (m *MediaAttributeMutation) AttributeCleared() bool {
	return m.clearedattribute
}

// AttributeIDs returns the "attribute" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttributeID instead. It exists only for internal usage by the builders.
func (m *MediaAttributeMutation) AttributeIDs() (ids []int) {
	if id := m.attribute; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttribute resets all changes to the "attribute" edge.
func (m *MediaAttributeMutation) ResetAttribute() {
	m.attribute = nil
	m.clearedattribute = false
}

// Where appends a list predicates to the MediaAttributeMutation builder.
func (m *MediaAttributeMutation) Where(ps ...predicate.MediaAttribute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaAttributeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaAttributeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MediaAttribute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaAttributeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaAttributeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MediaAttribute).
func (m *MediaAttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaAttributeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.media != nil {
		fields = append(fields, mediaattribute.FieldMediaID)
	}
	if m.attribute != nil {
		fields = append(fields, mediaattribute.FieldAttributeID)
	}
	if m.value != nil {
		fields = append(fields, mediaattribute.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaAttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediaattribute.FieldMediaID:
		return m.MediaID()
	case mediaattribute.FieldAttributeID:
		return m.AttributeID()
	case mediaattribute.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaAttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema MediaAttribute does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaAttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediaattribute.FieldMediaID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaID(v)
		return nil
	case mediaattribute.FieldAttributeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeID(v)
		return nil
	case mediaattribute.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown MediaAttribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaAttributeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaAttributeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaAttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MediaAttribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaAttributeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mediaattribute.FieldValue) {
		fields = append(fields, mediaattribute.FieldValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaAttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaAttributeMutation) ClearField(name string) error {
	switch name {
	case mediaattribute.FieldValue:
		m.ClearValue()
		return nil
	}
	return fmt.Errorf("unknown MediaAttribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaAttributeMutation) ResetField(name string) error {
	switch name {
	case mediaattribute.FieldMediaID:
		m.ResetMediaID()
		return nil
	case mediaattribute.FieldAttributeID:
		m.ResetAttributeID()
		return nil
	case mediaattribute.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown MediaAttribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaAttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.media != nil {
		edges = append(edges, mediaattribute.EdgeMedia)
	}
	if m.attribute != nil {
		edges = append(edges, mediaattribute.EdgeAttribute)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaAttributeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mediaattribute.EdgeMedia:
		if id := m.media; id != nil {
			return []ent.Value{*id}
		}
	case mediaattribute.EdgeAttribute:
		if id := m.attribute; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaAttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaAttributeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaAttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmedia {
		edges = append(edges, mediaattribute.EdgeMedia)
	}
	if m.clearedattribute {
		edges = append(edges, mediaattribute.EdgeAttribute)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaAttributeMutation) EdgeCleared(name string) bool {
	switch name {
	case mediaattribute.EdgeMedia:
		return m.clearedmedia
	case mediaattribute.EdgeAttribute:
		return m.clearedattribute
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaAttributeMutation) ClearEdge(name string) error {
	switch name {
	case mediaattribute.EdgeMedia:
		m.ClearMedia()
		return nil
	case mediaattribute.EdgeAttribute:
		m.ClearAttribute()
		return nil
	}
	return fmt.Errorf("unknown MediaAttribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaAttributeMutation) ResetEdge(name string) error {
	switch name {
	case mediaattribute.EdgeMedia:
		m.ResetMedia()
		return nil
	case mediaattribute.EdgeAttribute:
		m.ResetAttribute()
		return nil
	}
	return fmt.Errorf("unknown MediaAttribute edge %s", name)
}
