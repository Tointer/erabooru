// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/date"
	"era/booru/ent/media"
	"era/booru/ent/mediadate"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MediaDate is the model entity for the MediaDate schema.
type MediaDate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// DateID holds the value of the "date_id" field.
	DateID int `json:"date_id,omitempty"`
	// Date value for the media/date relation
	Value time.Time `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaDateQuery when eager-loading is set.
	Edges        MediaDateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaDateEdges holds the relations/edges for other nodes in the graph.
type MediaDateEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Date holds the value of the date edge.
	Date *Date `json:"date,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaDateEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// DateOrErr returns the Date value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaDateEdges) DateOrErr() (*Date, error) {
	if e.Date != nil {
		return e.Date, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: date.Label}
	}
	return nil, &NotLoadedError{edge: "date"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaDate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediadate.FieldID, mediadate.FieldDateID:
			values[i] = new(sql.NullInt64)
		case mediadate.FieldMediaID:
			values[i] = new(sql.NullString)
		case mediadate.FieldValue:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaDate fields.
func (md *MediaDate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediadate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			md.ID = int(value.Int64)
		case mediadate.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				md.MediaID = value.String
			}
		case mediadate.FieldDateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date_id", values[i])
			} else if value.Valid {
				md.DateID = int(value.Int64)
			}
		case mediadate.FieldValue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				md.Value = value.Time
			}
		default:
			md.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the MediaDate.
// This includes values selected through modifiers, order, etc.
func (md *MediaDate) GetValue(name string) (ent.Value, error) {
	return md.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the MediaDate entity.
func (md *MediaDate) QueryMedia() *MediaQuery {
	return NewMediaDateClient(md.config).QueryMedia(md)
}

// QueryDate queries the "date" edge of the MediaDate entity.
func (md *MediaDate) QueryDate() *DateQuery {
	return NewMediaDateClient(md.config).QueryDate(md)
}

// Update returns a builder for updating this MediaDate.
// Note that you need to call MediaDate.Unwrap() before calling this method if this MediaDate
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *MediaDate) Update() *MediaDateUpdateOne {
	return NewMediaDateClient(md.config).UpdateOne(md)
}

// Unwrap unwraps the MediaDate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *MediaDate) Unwrap() *MediaDate {
	_tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaDate is not a transactional entity")
	}
	md.config.driver = _tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *MediaDate) String() string {
	var builder strings.Builder
	builder.WriteString("MediaDate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", md.ID))
	builder.WriteString("media_id=")
	builder.WriteString(md.MediaID)
	builder.WriteString(", ")
	builder.WriteString("date_id=")
	builder.WriteString(fmt.Sprintf("%v", md.DateID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(md.Value.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaDates is a parsable slice of MediaDate.
type MediaDates []*MediaDate
