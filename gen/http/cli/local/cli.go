// Code generated by goa v3.21.1, DO NOT EDIT.
//
// local HTTP client CLI support package
//
// Command:
// $ goa gen era/booru/design

package cli

import (
	adminc "era/booru/gen/http/admin/client"
	healthc "era/booru/gen/http/health/client"
	mediac "era/booru/gen/http/media/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `media (list|previews|get|upload-url|update-tags|delete)
admin regenerate
health check
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` media list --q "Praesentium sed quaerat sed est." --page 8666627855434827924 --page-size 6932849482312394183` + "\n" +
		os.Args[0] + ` admin regenerate` + "\n" +
		os.Args[0] + ` health check` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mediaFlags = flag.NewFlagSet("media", flag.ContinueOnError)

		mediaListFlags        = flag.NewFlagSet("list", flag.ExitOnError)
		mediaListQFlag        = mediaListFlags.String("q", "", "")
		mediaListPageFlag     = mediaListFlags.String("page", "", "")
		mediaListPageSizeFlag = mediaListFlags.String("page-size", "", "")

		mediaPreviewsFlags        = flag.NewFlagSet("previews", flag.ExitOnError)
		mediaPreviewsQFlag        = mediaPreviewsFlags.String("q", "", "")
		mediaPreviewsPageFlag     = mediaPreviewsFlags.String("page", "", "")
		mediaPreviewsPageSizeFlag = mediaPreviewsFlags.String("page-size", "", "")

		mediaGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		mediaGetIDFlag = mediaGetFlags.String("id", "REQUIRED", "")

		mediaUploadURLFlags    = flag.NewFlagSet("upload-url", flag.ExitOnError)
		mediaUploadURLBodyFlag = mediaUploadURLFlags.String("body", "REQUIRED", "")

		mediaUpdateTagsFlags    = flag.NewFlagSet("update-tags", flag.ExitOnError)
		mediaUpdateTagsBodyFlag = mediaUpdateTagsFlags.String("body", "REQUIRED", "")
		mediaUpdateTagsIDFlag   = mediaUpdateTagsFlags.String("id", "REQUIRED", "")

		mediaDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		mediaDeleteIDFlag = mediaDeleteFlags.String("id", "REQUIRED", "")

		adminFlags = flag.NewFlagSet("admin", flag.ContinueOnError)

		adminRegenerateFlags = flag.NewFlagSet("regenerate", flag.ExitOnError)

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthCheckFlags = flag.NewFlagSet("check", flag.ExitOnError)
	)
	mediaFlags.Usage = mediaUsage
	mediaListFlags.Usage = mediaListUsage
	mediaPreviewsFlags.Usage = mediaPreviewsUsage
	mediaGetFlags.Usage = mediaGetUsage
	mediaUploadURLFlags.Usage = mediaUploadURLUsage
	mediaUpdateTagsFlags.Usage = mediaUpdateTagsUsage
	mediaDeleteFlags.Usage = mediaDeleteUsage

	adminFlags.Usage = adminUsage
	adminRegenerateFlags.Usage = adminRegenerateUsage

	healthFlags.Usage = healthUsage
	healthCheckFlags.Usage = healthCheckUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "media":
			svcf = mediaFlags
		case "admin":
			svcf = adminFlags
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "media":
			switch epn {
			case "list":
				epf = mediaListFlags

			case "previews":
				epf = mediaPreviewsFlags

			case "get":
				epf = mediaGetFlags

			case "upload-url":
				epf = mediaUploadURLFlags

			case "update-tags":
				epf = mediaUpdateTagsFlags

			case "delete":
				epf = mediaDeleteFlags

			}

		case "admin":
			switch epn {
			case "regenerate":
				epf = adminRegenerateFlags

			}

		case "health":
			switch epn {
			case "check":
				epf = healthCheckFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "media":
			c := mediac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = mediac.BuildListPayload(*mediaListQFlag, *mediaListPageFlag, *mediaListPageSizeFlag)
			case "previews":
				endpoint = c.Previews()
				data, err = mediac.BuildPreviewsPayload(*mediaPreviewsQFlag, *mediaPreviewsPageFlag, *mediaPreviewsPageSizeFlag)
			case "get":
				endpoint = c.Get()
				data, err = mediac.BuildGetPayload(*mediaGetIDFlag)
			case "upload-url":
				endpoint = c.UploadURL()
				data, err = mediac.BuildUploadURLPayload(*mediaUploadURLBodyFlag)
			case "update-tags":
				endpoint = c.UpdateTags()
				data, err = mediac.BuildUpdateTagsPayload(*mediaUpdateTagsBodyFlag, *mediaUpdateTagsIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = mediac.BuildDeletePayload(*mediaDeleteIDFlag)
			}
		case "admin":
			c := adminc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "regenerate":
				endpoint = c.Regenerate()
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check":
				endpoint = c.Check()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mediaUsage displays the usage of the media command and its subcommands.
func mediaUsage() {
	fmt.Fprintf(os.Stderr, `Media operations
Usage:
    %[1]s [globalflags] media COMMAND [flags]

COMMAND:
    list: List media items
    previews: List media previews
    get: Get media item by ID
    upload-url: Get a presigned upload URL
    update-tags: Update tags for media item
    delete: Delete media item

Additional help:
    %[1]s media COMMAND --help
`, os.Args[0])
}
func mediaListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media list -q STRING -page INT -page-size INT

List media items
    -q STRING: 
    -page INT: 
    -page-size INT: 

Example:
    %[1]s media list --q "Praesentium sed quaerat sed est." --page 8666627855434827924 --page-size 6932849482312394183
`, os.Args[0])
}

func mediaPreviewsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media previews -q STRING -page INT -page-size INT

List media previews
    -q STRING: 
    -page INT: 
    -page-size INT: 

Example:
    %[1]s media previews --q "Accusamus iste rem." --page 2069716737770568474 --page-size 8782883371545659112
`, os.Args[0])
}

func mediaGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media get -id STRING

Get media item by ID
    -id STRING: 

Example:
    %[1]s media get --id "Sunt expedita similique est dicta nesciunt totam."
`, os.Args[0])
}

func mediaUploadURLUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media upload-url -body JSON

Get a presigned upload URL
    -body JSON: 

Example:
    %[1]s media upload-url --body '{
      "filename": "In quis tempore culpa quibusdam."
   }'
`, os.Args[0])
}

func mediaUpdateTagsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media update-tags -body JSON -id STRING

Update tags for media item
    -body JSON: 
    -id STRING: 

Example:
    %[1]s media update-tags --body '{
      "tags": [
         "Doloribus laborum.",
         "Deserunt qui corrupti nihil commodi minima consequatur."
      ]
   }' --id "Dicta ratione."
`, os.Args[0])
}

func mediaDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] media delete -id STRING

Delete media item
    -id STRING: 

Example:
    %[1]s media delete --id "Harum sunt magnam voluptas eius."
`, os.Args[0])
}

// adminUsage displays the usage of the admin command and its subcommands.
func adminUsage() {
	fmt.Fprintf(os.Stderr, `Admin operations
Usage:
    %[1]s [globalflags] admin COMMAND [flags]

COMMAND:
    regenerate: Regenerate search index and metadata

Additional help:
    %[1]s admin COMMAND --help
`, os.Args[0])
}
func adminRegenerateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin regenerate

Regenerate search index and metadata

Example:
    %[1]s admin regenerate
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service health check
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    check: Check implements check.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health check

Check implements check.

Example:
    %[1]s health check
`, os.Args[0])
}
