// Code generated by goa v3.21.1, DO NOT EDIT.
//
// media HTTP client types
//
// Command:
// $ goa gen era/booru/design

package client

import (
	media "era/booru/gen/media"

	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "media" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Media []*MediaItemResponseBody `form:"media,omitempty" json:"media,omitempty" xml:"media,omitempty"`
	Total *int                     `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// PreviewsResponseBody is the type of the "media" service "previews" endpoint
// HTTP response body.
type PreviewsResponseBody struct {
	Media []*MediaItemResponseBody `form:"media,omitempty" json:"media,omitempty" xml:"media,omitempty"`
	Total *int                     `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// GetResponseBody is the type of the "media" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Width  *int    `form:"width,omitempty" json:"width,omitempty" xml:"width,omitempty"`
	Height *int    `form:"height,omitempty" json:"height,omitempty" xml:"height,omitempty"`
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Video duration in seconds
	Duration *int     `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Size     *int64   `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Tags     []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// UploadURLResponseBody is the type of the "media" service "uploadURL"
// endpoint HTTP response body.
type UploadURLResponseBody struct {
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Object *string `form:"object,omitempty" json:"object,omitempty" xml:"object,omitempty"`
}

// MediaItemResponseBody is used to define fields on response body types.
type MediaItemResponseBody struct {
	ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Width  *int    `form:"width,omitempty" json:"width,omitempty" xml:"width,omitempty"`
	Height *int    `form:"height,omitempty" json:"height,omitempty" xml:"height,omitempty"`
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
}

// NewListMediaListOK builds a "media" service "list" endpoint result from a
// HTTP "OK" response.
func NewListMediaListOK(body *ListResponseBody) *media.MediaList {
	v := &media.MediaList{
		Total: *body.Total,
	}
	v.Media = make([]*media.MediaItem, len(body.Media))
	for i, val := range body.Media {
		v.Media[i] = unmarshalMediaItemResponseBodyToMediaMediaItem(val)
	}

	return v
}

// NewPreviewsMediaListOK builds a "media" service "previews" endpoint result
// from a HTTP "OK" response.
func NewPreviewsMediaListOK(body *PreviewsResponseBody) *media.MediaList {
	v := &media.MediaList{
		Total: *body.Total,
	}
	v.Media = make([]*media.MediaItem, len(body.Media))
	for i, val := range body.Media {
		v.Media[i] = unmarshalMediaItemResponseBodyToMediaMediaItem(val)
	}

	return v
}

// NewGetMediaDetailOK builds a "media" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetMediaDetailOK(body *GetResponseBody) *media.MediaDetail {
	v := &media.MediaDetail{
		ID:       body.ID,
		URL:      body.URL,
		Width:    body.Width,
		Height:   body.Height,
		Format:   body.Format,
		Duration: body.Duration,
		Size:     body.Size,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}

	return v
}

// NewUploadURLResponseOK builds a "media" service "uploadURL" endpoint result
// from a HTTP "OK" response.
func NewUploadURLResponseOK(body *UploadURLResponseBody) *media.UploadURLResponse {
	v := &media.UploadURLResponse{
		URL:    body.URL,
		Object: body.Object,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Media == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("media", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	return
}

// ValidatePreviewsResponseBody runs the validations defined on
// PreviewsResponseBody
func ValidatePreviewsResponseBody(body *PreviewsResponseBody) (err error) {
	if body.Media == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("media", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	return
}
