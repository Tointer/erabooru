// Code generated by goa v3.21.1, DO NOT EDIT.
//
// media HTTP server encoders and decoders
//
// Command:
// $ goa gen era/booru/design

package server

import (
	"context"
	media "era/booru/gen/media"
	"errors"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the media
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*media.MediaList)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the media list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			q        *string
			page     *int
			pageSize *int
			err      error
		)
		qp := r.URL.Query()
		qRaw := qp.Get("q")
		if qRaw != "" {
			q = &qRaw
		}
		{
			pageRaw := qp.Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			pageSizeRaw := qp.Get("page_size")
			if pageSizeRaw != "" {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page_size", pageSizeRaw, "integer"))
				}
				pv := int(v)
				pageSize = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListPayload(q, page, pageSize)

		return payload, nil
	}
}

// EncodePreviewsResponse returns an encoder for responses returned by the
// media previews endpoint.
func EncodePreviewsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*media.MediaList)
		enc := encoder(ctx, w)
		body := NewPreviewsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePreviewsRequest returns a decoder for requests sent to the media
// previews endpoint.
func DecodePreviewsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			q        *string
			page     *int
			pageSize *int
			err      error
		)
		qp := r.URL.Query()
		qRaw := qp.Get("q")
		if qRaw != "" {
			q = &qRaw
		}
		{
			pageRaw := qp.Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			pageSizeRaw := qp.Get("page_size")
			if pageSizeRaw != "" {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page_size", pageSizeRaw, "integer"))
				}
				pv := int(v)
				pageSize = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewPreviewsPayload(q, page, pageSize)

		return payload, nil
	}
}

// EncodeGetResponse returns an encoder for responses returned by the media get
// endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*media.MediaDetail)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the media get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetPayload(id)

		return payload, nil
	}
}

// EncodeUploadURLResponse returns an encoder for responses returned by the
// media uploadURL endpoint.
func EncodeUploadURLResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*media.UploadURLResponse)
		enc := encoder(ctx, w)
		body := NewUploadURLResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadURLRequest returns a decoder for requests sent to the media
// uploadURL endpoint.
func DecodeUploadURLRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body struct {
				Filename *string `form:"filename" json:"filename" xml:"filename"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewUploadURLPayload(body)

		return payload, nil
	}
}

// EncodeUpdateTagsResponse returns an encoder for responses returned by the
// media updateTags endpoint.
func EncodeUpdateTagsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpdateTagsRequest returns a decoder for requests sent to the media
// updateTags endpoint.
func DecodeUpdateTagsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body struct {
				Tags []string `form:"tags" json:"tags" xml:"tags"`
			}
			err error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewUpdateTagsPayload(body, id)

		return payload, nil
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the media
// delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the media delete
// endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewDeletePayload(id)

		return payload, nil
	}
}

// marshalMediaMediaItemToMediaItemResponseBody builds a value of type
// *MediaItemResponseBody from a value of type *media.MediaItem.
func marshalMediaMediaItemToMediaItemResponseBody(v *media.MediaItem) *MediaItemResponseBody {
	res := &MediaItemResponseBody{
		ID:     v.ID,
		URL:    v.URL,
		Width:  v.Width,
		Height: v.Height,
		Format: v.Format,
	}

	return res
}
