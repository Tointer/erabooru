// Code generated by goa v3.21.1, DO NOT EDIT.
//
// media HTTP server types
//
// Command:
// $ goa gen era/booru/design

package server

import (
	media "era/booru/gen/media"
)

// ListResponseBody is the type of the "media" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Media []*MediaItemResponseBody `form:"media" json:"media" xml:"media"`
	Total int                      `form:"total" json:"total" xml:"total"`
}

// PreviewsResponseBody is the type of the "media" service "previews" endpoint
// HTTP response body.
type PreviewsResponseBody struct {
	Media []*MediaItemResponseBody `form:"media" json:"media" xml:"media"`
	Total int                      `form:"total" json:"total" xml:"total"`
}

// GetResponseBody is the type of the "media" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Width  *int    `form:"width,omitempty" json:"width,omitempty" xml:"width,omitempty"`
	Height *int    `form:"height,omitempty" json:"height,omitempty" xml:"height,omitempty"`
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
	// Video duration in seconds
	Duration *int     `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Size     *int64   `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Tags     []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// UploadURLResponseBody is the type of the "media" service "uploadURL"
// endpoint HTTP response body.
type UploadURLResponseBody struct {
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Object *string `form:"object,omitempty" json:"object,omitempty" xml:"object,omitempty"`
}

// MediaItemResponseBody is used to define fields on response body types.
type MediaItemResponseBody struct {
	ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL    *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Width  *int    `form:"width,omitempty" json:"width,omitempty" xml:"width,omitempty"`
	Height *int    `form:"height,omitempty" json:"height,omitempty" xml:"height,omitempty"`
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "media" service.
func NewListResponseBody(res *media.MediaList) *ListResponseBody {
	body := &ListResponseBody{
		Total: res.Total,
	}
	if res.Media != nil {
		body.Media = make([]*MediaItemResponseBody, len(res.Media))
		for i, val := range res.Media {
			body.Media[i] = marshalMediaMediaItemToMediaItemResponseBody(val)
		}
	} else {
		body.Media = []*MediaItemResponseBody{}
	}
	return body
}

// NewPreviewsResponseBody builds the HTTP response body from the result of the
// "previews" endpoint of the "media" service.
func NewPreviewsResponseBody(res *media.MediaList) *PreviewsResponseBody {
	body := &PreviewsResponseBody{
		Total: res.Total,
	}
	if res.Media != nil {
		body.Media = make([]*MediaItemResponseBody, len(res.Media))
		for i, val := range res.Media {
			body.Media[i] = marshalMediaMediaItemToMediaItemResponseBody(val)
		}
	} else {
		body.Media = []*MediaItemResponseBody{}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "media" service.
func NewGetResponseBody(res *media.MediaDetail) *GetResponseBody {
	body := &GetResponseBody{
		ID:       res.ID,
		URL:      res.URL,
		Width:    res.Width,
		Height:   res.Height,
		Format:   res.Format,
		Duration: res.Duration,
		Size:     res.Size,
	}
	if res.Tags != nil {
		body.Tags = make([]string, len(res.Tags))
		for i, val := range res.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewUploadURLResponseBody builds the HTTP response body from the result of
// the "uploadURL" endpoint of the "media" service.
func NewUploadURLResponseBody(res *media.UploadURLResponse) *UploadURLResponseBody {
	body := &UploadURLResponseBody{
		URL:    res.URL,
		Object: res.Object,
	}
	return body
}

// NewListPayload builds a media service list endpoint payload.
func NewListPayload(q *string, page *int, pageSize *int) *media.ListPayload {
	v := &media.ListPayload{}
	v.Q = q
	v.Page = page
	v.PageSize = pageSize

	return v
}

// NewPreviewsPayload builds a media service previews endpoint payload.
func NewPreviewsPayload(q *string, page *int, pageSize *int) *media.PreviewsPayload {
	v := &media.PreviewsPayload{}
	v.Q = q
	v.Page = page
	v.PageSize = pageSize

	return v
}

// NewGetPayload builds a media service get endpoint payload.
func NewGetPayload(id string) *media.GetPayload {
	v := &media.GetPayload{}
	v.ID = id

	return v
}

// NewUploadURLPayload builds a media service uploadURL endpoint payload.
func NewUploadURLPayload(body struct {
	Filename *string `form:"filename" json:"filename" xml:"filename"`
}) *media.UploadURLPayload {
	v := &media.UploadURLPayload{}
	if body.Filename != nil {
		v.Filename = *body.Filename
	}

	return v
}

// NewUpdateTagsPayload builds a media service updateTags endpoint payload.
func NewUpdateTagsPayload(body struct {
	Tags []string `form:"tags" json:"tags" xml:"tags"`
}, id string) *media.UpdateTagsPayload {
	v := &media.UpdateTagsPayload{}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a media service delete endpoint payload.
func NewDeletePayload(id string) *media.DeletePayload {
	v := &media.DeletePayload{}
	v.ID = id

	return v
}
