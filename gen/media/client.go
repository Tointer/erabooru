// Code generated by goa v3.21.1, DO NOT EDIT.
//
// media client
//
// Command:
// $ goa gen era/booru/design

package media

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "media" service client.
type Client struct {
	ListEndpoint       goa.Endpoint
	PreviewsEndpoint   goa.Endpoint
	GetEndpoint        goa.Endpoint
	UploadURLEndpoint  goa.Endpoint
	UpdateTagsEndpoint goa.Endpoint
	DeleteEndpoint     goa.Endpoint
}

// NewClient initializes a "media" service client given the endpoints.
func NewClient(list, previews, get, uploadURL, updateTags, delete_ goa.Endpoint) *Client {
	return &Client{
		ListEndpoint:       list,
		PreviewsEndpoint:   previews,
		GetEndpoint:        get,
		UploadURLEndpoint:  uploadURL,
		UpdateTagsEndpoint: updateTags,
		DeleteEndpoint:     delete_,
	}
}

// List calls the "list" endpoint of the "media" service.
func (c *Client) List(ctx context.Context, p *ListPayload) (res *MediaList, err error) {
	var ires any
	ires, err = c.ListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MediaList), nil
}

// Previews calls the "previews" endpoint of the "media" service.
func (c *Client) Previews(ctx context.Context, p *PreviewsPayload) (res *MediaList, err error) {
	var ires any
	ires, err = c.PreviewsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MediaList), nil
}

// Get calls the "get" endpoint of the "media" service.
func (c *Client) Get(ctx context.Context, p *GetPayload) (res *MediaDetail, err error) {
	var ires any
	ires, err = c.GetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MediaDetail), nil
}

// UploadURL calls the "uploadURL" endpoint of the "media" service.
func (c *Client) UploadURL(ctx context.Context, p *UploadURLPayload) (res *UploadURLResponse, err error) {
	var ires any
	ires, err = c.UploadURLEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UploadURLResponse), nil
}

// UpdateTags calls the "updateTags" endpoint of the "media" service.
func (c *Client) UpdateTags(ctx context.Context, p *UpdateTagsPayload) (err error) {
	_, err = c.UpdateTagsEndpoint(ctx, p)
	return
}

// Delete calls the "delete" endpoint of the "media" service.
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}
