// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMediaByHash = `-- name: GetMediaByHash :one
SELECT id, hash, mime_type, width, height, duration, created_at FROM media WHERE hash = $1 LIMIT 1
`

func (q *Queries) GetMediaByHash(ctx context.Context, hash []byte) (Medium, error) {
	row := q.db.QueryRow(ctx, getMediaByHash, hash)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.MimeType,
		&i.Width,
		&i.Height,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const insertMedia = `-- name: InsertMedia :one
INSERT INTO media (hash, mime_type, width, height, duration)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertMediaParams struct {
	Hash     []byte        `json:"hash"`
	MimeType string        `json:"mime_type"`
	Width    int32         `json:"width"`
	Height   int32         `json:"height"`
	Duration pgtype.Float4 `json:"duration"`
}

func (q *Queries) InsertMedia(ctx context.Context, arg InsertMediaParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertMedia,
		arg.Hash,
		arg.MimeType,
		arg.Width,
		arg.Height,
		arg.Duration,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
