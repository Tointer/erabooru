// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// MediaDetail defines model for MediaDetail.
type MediaDetail struct {
	// Duration Video duration in seconds
	Duration *int64    `json:"duration,omitempty"`
	Format   *string   `json:"format,omitempty"`
	Height   *int64    `json:"height,omitempty"`
	Id       *string   `json:"id,omitempty"`
	Size     *int64    `json:"size,omitempty"`
	Tags     *[]string `json:"tags,omitempty"`
	Url      *string   `json:"url,omitempty"`
	Width    *int64    `json:"width,omitempty"`
}

// MediaItem defines model for MediaItem.
type MediaItem struct {
	Format *string `json:"format,omitempty"`
	Height *int64  `json:"height,omitempty"`
	Id     *string `json:"id,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int64  `json:"width,omitempty"`
}

// MediaList defines model for MediaList.
type MediaList struct {
	Media []MediaItem `json:"media"`
	Total int64       `json:"total"`
}

// UploadURLResponse defines model for UploadURLResponse.
type UploadURLResponse struct {
	Object *string `json:"object,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// MediaListParams defines parameters for MediaList.
type MediaListParams struct {
	Q        *string `form:"q,omitempty" json:"q,omitempty"`
	Page     *int64  `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int64  `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MediaPreviewsParams defines parameters for MediaPreviews.
type MediaPreviewsParams struct {
	Q        *string `form:"q,omitempty" json:"q,omitempty"`
	Page     *int64  `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int64  `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// MediaUploadURLJSONBody defines parameters for MediaUploadURL.
type MediaUploadURLJSONBody struct {
	Filename *string `json:"filename,omitempty"`
}

// MediaUpdateTagsJSONBody defines parameters for MediaUpdateTags.
type MediaUpdateTagsJSONBody struct {
	Tags *[]string `json:"tags,omitempty"`
}

// MediaUploadURLJSONRequestBody defines body for MediaUploadURL for application/json ContentType.
type MediaUploadURLJSONRequestBody MediaUploadURLJSONBody

// MediaUpdateTagsJSONRequestBody defines body for MediaUpdateTags for application/json ContentType.
type MediaUpdateTagsJSONRequestBody MediaUpdateTagsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// regenerate admin
	// (POST /api/admin/regenerate)
	AdminRegenerate(c *gin.Context)
	// list media
	// (GET /api/media)
	MediaList(c *gin.Context, params MediaListParams)
	// previews media
	// (GET /api/media/previews)
	MediaPreviews(c *gin.Context, params MediaPreviewsParams)
	// uploadURL media
	// (POST /api/media/upload-url)
	MediaUploadURL(c *gin.Context)
	// delete media
	// (DELETE /api/media/{id})
	MediaDelete(c *gin.Context, id string)
	// get media
	// (GET /api/media/{id})
	MediaGet(c *gin.Context, id string)
	// updateTags media
	// (POST /api/media/{id}/tags)
	MediaUpdateTags(c *gin.Context, id string)
	// check health
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AdminRegenerate operation middleware
func (siw *ServerInterfaceWrapper) AdminRegenerate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminRegenerate(c)
}

// MediaList operation middleware
func (siw *ServerInterfaceWrapper) MediaList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params MediaListParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaList(c, params)
}

// MediaPreviews operation middleware
func (siw *ServerInterfaceWrapper) MediaPreviews(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params MediaPreviewsParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaPreviews(c, params)
}

// MediaUploadURL operation middleware
func (siw *ServerInterfaceWrapper) MediaUploadURL(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaUploadURL(c)
}

// MediaDelete operation middleware
func (siw *ServerInterfaceWrapper) MediaDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaDelete(c, id)
}

// MediaGet operation middleware
func (siw *ServerInterfaceWrapper) MediaGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaGet(c, id)
}

// MediaUpdateTags operation middleware
func (siw *ServerInterfaceWrapper) MediaUpdateTags(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MediaUpdateTags(c, id)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/admin/regenerate", wrapper.AdminRegenerate)
	router.GET(options.BaseURL+"/api/media", wrapper.MediaList)
	router.GET(options.BaseURL+"/api/media/previews", wrapper.MediaPreviews)
	router.POST(options.BaseURL+"/api/media/upload-url", wrapper.MediaUploadURL)
	router.DELETE(options.BaseURL+"/api/media/:id", wrapper.MediaDelete)
	router.GET(options.BaseURL+"/api/media/:id", wrapper.MediaGet)
	router.POST(options.BaseURL+"/api/media/:id/tags", wrapper.MediaUpdateTags)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}
